<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd">
    
    <!-- 设置使用注解的类所在的jar包 -->
    <context:component-scan base-package="com.pengyd"></context:component-scan>
	<!-- 引入配置文件 开始 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:application.properties</value>
            </list>
        </property>
    </bean>
    <!-- 引入配置文件 结束-->

        <!-- mysql  -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
	      <property name="driverClassName">  
	          <value>${jdbc.driver}</value>  
	      </property>  
	      <property name="url" >  
	          <value>${jdbc.url}</value>  
	      </property>  
	      <property name="username" >  
	          <value>${jdbc.username}</value>  
	      </property>  
	      <property name="password">  
	          <value>${jdbc.password}</value>
	      </property>   
    </bean>
	
	<!-- mybatis文件配置，扫描所有mapper文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" p:dataSource-ref="dataSource"
          p:configLocation="classpath:mybatis-config.xml"
          p:mapperLocations="classpath:com/pengyd/dao/*.xml"/>

    <!-- spring与mybatis整合配置，扫描所有dao -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" p:basePackage="com.pengyd.dao"
          p:sqlSessionFactoryBeanName="sqlSessionFactory"/>

    <!-- 对dataSource 数据源进行事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>
	<!-- 配置使Spring采用CGLIB代理 -->
   <!--  <aop:aspectj-autoproxy proxy-target-class="true"/> -->
    <!-- 事务管理 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <!-- select,count开头的方法,开启只读,提高数据库访问性能 -->
            <tx:method name="select*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <!-- 对其他方法 使用默认的事务管理 -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 事务 aop 配置 -->
    <aop:config>
        <aop:pointcut id="serviceMethods" expression="execution(* com.pengyd.service..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
    </aop:config>
   
    <!-- 注入日志类 -->
    <bean id = "logAspect" class = "com.pengyd.loggerAop.ArchivesLogAspect"/>
    
    <!--配置切面  -->
    <aop:config>
        <aop:aspect id="LogAspect" ref = "logAspect">
        	<aop:pointcut id="log" expression="execution(* com.pengyd.service.impl.*.*(..))"/>
        	<aop:before pointcut-ref="log" method="before"/>
        	<aop:after pointcut-ref="log" method="after"/>
        	<aop:after-throwing pointcut-ref="log" method="afterThrow" throwing="ex"/>
        	<!-- <aop:after-throwing method="afterThrow"  pointcut="execution(* com.pengyd.service..*.*(..))" /> -->
        </aop:aspect>
    </aop:config>
	 <!-- and (!execution(* com.pengyd.controller.*.log*(..)))  -->
    <!-- 启用对事务注解的支持 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    
    <!-- Cache配置 -->
    <cache:annotation-driven cache-manager="cacheManagerDB"/>
    <bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
          p:configLocation="classpath:ehcache.xml"/>
    <bean id="cacheManagerDB" class="org.springframework.cache.ehcache.EhCacheCacheManager"
          p:cacheManager-ref="ehCacheManagerFactory"/>


    <!-- 全局代理类 -->
    <bean class="com.pengyd.util.SpringContextUtil"/>

    <!-- 导入相关配置 -->
    <import resource="classpath:activiti-context.xml"/>
</beans>